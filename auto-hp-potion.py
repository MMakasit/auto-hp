import cv2
import numpy as np
import pyautogui
import time
import keyboard
from threading import Thread
import tkinter as tk
from tkinter import messagebox
import os
import sys

class AutoHPPotion:
    def __init__(self):
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        self.running = False
        self.hp_region = None
        self.hp_key = 'f1'
        self.threshold = 0.6
        self.check_interval = 0.2
        self.cooldown = 1.0  # ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏¢‡∏≤
        
        # ‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö HP
        self.detection_mode = 'color'  # 'color' ‡∏´‡∏£‡∏∑‡∏≠ 'position'
        
        # ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö (BGR format)
        self.hp_color_lower = np.array([0, 0, 100])    # ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
        self.hp_color_upper = np.array([80, 80, 255])  # ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        self.current_hp_percent = 1.0
        self.potion_used_count = 0
        
        # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        pyautogui.FAILSAFE = True
        pyautogui.PAUSE = 0.1
        
    def select_hp_bar_region(self):
        """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≠‡∏î HP ‡∏î‡πâ‡∏ß‡∏¢ GUI"""
        print("=== ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≠‡∏î HP ===")
        print("1. ‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà")
        print("2. ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏•‡∏≤‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≠‡∏î HP")
        print("3. ‡∏Å‡∏î ESC ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
        
        input("‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°...")
        
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
            root = tk.Tk()
            root.withdraw()  # ‡∏ã‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
            
            # ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
            messagebox.showinfo("‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà", 
                              "‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏•‡∏≤‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≠‡∏î HP\n"
                              "‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô")
            
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏à‡∏∏‡∏î‡πÅ‡∏£‡∏Å
            print("‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏∏‡∏°‡∏ã‡πâ‡∏≤‡∏¢‡∏ö‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏•‡∏≠‡∏î HP...")
            while True:
                if keyboard.is_pressed('esc'):
                    return None
                try:
                    x1, y1 = pyautogui.position()
                    if pyautogui.mouseDown(button='left'):
                        break
                except:
                    pass
                time.sleep(0.1)
            
            time.sleep(0.3)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏ñ‡∏π‡∏Å‡∏õ‡∏•‡πà‡∏≠‡∏¢
            
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á  
            print("‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏∏‡∏°‡∏Ç‡∏ß‡∏≤‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏•‡∏≠‡∏î HP...")
            while True:
                if keyboard.is_pressed('esc'):
                    return None
                try:
                    x2, y2 = pyautogui.position()
                    if pyautogui.mouseDown(button='left'):
                        break
                except:
                    pass
                time.sleep(0.1)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
            self.hp_region = (
                min(x1, x2), 
                min(y1, y2), 
                abs(x2 - x1), 
                abs(y2 - y1)
            )
            
            print(f"‚úì ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≠‡∏î HP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {self.hp_region}")
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û
            test_hp = self.analyze_hp_bar()
            print(f"‚úì ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ HP: {test_hp*100:.1f}%")
            
            root.destroy()
            return self.hp_region
            
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà: {e}")
            try:
                root.destroy()
            except:
                pass
            return None
    
    def set_detection_mode(self, mode):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö"""
        if mode in ['color', 'position']:
            self.detection_mode = mode
            print(f"‚úì ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô: {mode}")
        else:
            print("‚ùå ‡πÇ‡∏´‡∏°‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÉ‡∏ä‡πâ 'color' ‡∏´‡∏£‡∏∑‡∏≠ 'position')")
    
    def set_hp_key(self, key):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏¢‡∏≤ HP"""
        self.hp_key = key.lower()
        print(f"‚úì ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏¢‡∏≤ HP ‡πÄ‡∏õ‡πá‡∏ô: {key}")
    
    def set_threshold(self, threshold):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏¢‡∏≤"""
        if 0.1 <= threshold <= 0.9:
            self.threshold = threshold
            print(f"‚úì ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏¢‡∏≤‡πÄ‡∏õ‡πá‡∏ô: {threshold*100}%")
        else:
            print("‚ùå ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0.1 ‡∏ñ‡∏∂‡∏á 0.9")
    
    def analyze_hp_bar(self):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏•‡∏≠‡∏î HP"""
        if not self.hp_region:
            return 1.0
        
        try:
            # ‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
            screenshot = pyautogui.screenshot(region=self.hp_region)
            screenshot = np.array(screenshot)
            screenshot_bgr = cv2.cvtColor(screenshot, cv2.COLOR_RGB2BGR)
            
            if self.detection_mode == 'color':
                return self._analyze_by_color(screenshot_bgr)
            else:
                return self._analyze_by_position(screenshot_bgr)
                
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå HP: {e}")
            return 1.0
    
    def _analyze_by_color(self, image):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå HP ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏™‡∏µ"""
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏µ‡πÅ‡∏î‡∏á
        mask = cv2.inRange(image, self.hp_color_lower, self.hp_color_upper)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏µ‡πÅ‡∏î‡∏á
        red_pixels = cv2.countNonZero(mask)
        total_pixels = self.hp_region[2] * self.hp_region[3]
        
        hp_percent = red_pixels / total_pixels if total_pixels > 0 else 1.0
        return min(max(hp_percent, 0.0), 1.0)  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0-1
    
    def _analyze_by_position(self, image):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå HP ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≠‡∏î HP ‡πÅ‡∏ö‡∏ö‡πÑ‡∏•‡πà‡πÄ‡∏â‡∏î)"""
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Grayscale
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        
        # ‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏µ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á)
        height, width = gray.shape
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        hp_widths = []
        for y in range(height):
            row = gray[y, :]
            # ‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å (‡∏Ç‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏´‡∏•‡∏≠‡∏î HP)
            diff = np.abs(np.diff(row.astype(int)))
            if len(diff) > 0 and np.max(diff) > 30:
                edges = np.where(diff > 30)[0]
                if len(edges) >= 2:
                    hp_width = edges[-1] - edges[0]
                    hp_widths.append(hp_width / width)
        
        if hp_widths:
            return np.mean(hp_widths)
        else:
            return 1.0
    
    def use_hp_potion(self):
        """‡πÉ‡∏ä‡πâ‡∏¢‡∏≤ HP"""
        try:
            print(f"üî¥ HP: {self.current_hp_percent*100:.1f}% - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏¢‡∏≤ HP (‡∏õ‡∏∏‡πà‡∏° {self.hp_key})")
            pyautogui.press(self.hp_key)
            self.potion_used_count += 1
            return True
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏¢‡∏≤: {e}")
            return False
    
    def monitor_loop(self):
        """‡∏•‡∏π‡∏õ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏≠‡∏î HP"""
        print("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏≠‡∏î HP...")
        last_use_time = 0
        
        while self.running:
            try:
                current_time = time.time()
                self.current_hp_percent = self.analyze_hp_bar()
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ HP
                if current_time % 5 < self.check_interval:  # ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                    status = "üü¢" if self.current_hp_percent >= self.threshold else "üü°"
                    print(f"{status} HP: {self.current_hp_percent*100:.1f}% | "
                          f"‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: {self.potion_used_count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏¢‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if (self.current_hp_percent < self.threshold and 
                    current_time - last_use_time > self.cooldown):
                    
                    if self.use_hp_potion():
                        last_use_time = current_time
                
                time.sleep(self.check_interval)
                
            except KeyboardInterrupt:
                break
            except Exception as e:
                print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏•‡∏π‡∏õ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: {e}")
                time.sleep(1)
    
    def start(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
        print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° Auto HP Potion")
        
        if not self.hp_region:
            print("üìç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≠‡∏î HP...")
            if not self.select_hp_bar_region():
                print("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà")
                return
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        print(f"\n‚öôÔ∏è  ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:")
        print(f"   - ‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏¢‡∏≤: {self.hp_key}")
        print(f"   - ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÉ‡∏ä‡πâ‡∏¢‡∏≤: {self.threshold*100}%")
        print(f"   - ‡πÇ‡∏´‡∏°‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö: {self.detection_mode}")
        print(f"   - ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: {self.check_interval}s")
        print(f"   - Cooldown: {self.cooldown}s")
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        self.running = True
        self.monitor_thread = Thread(target=self.monitor_loop)
        self.monitor_thread.daemon = True
        self.monitor_thread.start()
        
        print(f"\n‚úÖ ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!")
        print("üõë ‡∏Å‡∏î 'q' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
        print("üîÑ ‡∏Å‡∏î 'r' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥")
        print("üìä ‡∏Å‡∏î 's' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞")
        
        # ‡∏£‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        try:
            while self.running:
                if keyboard.is_pressed('q'):
                    break
                elif keyboard.is_pressed('r'):
                    self.potion_used_count = 0
                    print("üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß")
                    time.sleep(0.5)
                elif keyboard.is_pressed('s'):
                    print(f"üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: HP {self.current_hp_percent*100:.1f}% | "
                          f"‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ {self.potion_used_count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                    time.sleep(0.5)
                time.sleep(0.1)
        except KeyboardInterrupt:
            pass
        
        self.stop()
    
    def stop(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
        self.running = False
        print(f"\nüõë ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
        print(f"üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥: ‡πÉ‡∏ä‡πâ‡∏¢‡∏≤ HP ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {self.potion_used_count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")

def main():
    print("üéÆ ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÉ‡∏ä‡πâ‡∏¢‡∏≤ HP ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ v2.0")
    print("=" * 40)
    
    auto_hp = AutoHPPotion()
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
    print("\nüîß ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö HP:")
    print("1. color - ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≠‡∏î HP ‡∏™‡∏µ‡πÅ‡∏î‡∏á)")
    print("2. position - ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≠‡∏î HP ‡πÑ‡∏•‡πà‡πÄ‡∏â‡∏î)")
    
    mode_choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î (1/2, default=1): ").strip()
    if mode_choice == '2':
        auto_hp.set_detection_mode('position')
    else:
        auto_hp.set_detection_mode('color')
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏¢‡∏≤
    key = input("\nüéØ ‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏¢‡∏≤ HP (‡πÄ‡∏ä‡πà‡∏ô f1, 1, q, default=f1): ").strip()
    if key:
        auto_hp.set_hp_key(key)
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏¢‡∏≤
    try:
        threshold_input = input("‚ö° ‡πÉ‡∏™‡πà‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏¢‡∏≤ (0.1-0.9, default=0.6): ").strip()
        if threshold_input:
            threshold = float(threshold_input)
            auto_hp.set_threshold(threshold)
    except ValueError:
        print("‚ùå ‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 0.6")
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
    try:
        auto_hp.start()
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    except KeyboardInterrupt:
        print("\nüõë ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")

if __name__ == "__main__":
    main()